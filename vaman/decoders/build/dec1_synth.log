
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 9ac3484, x86_64-conda_cos6-linux-gnu-gcc 1.24.0.133_b0863d8_dirty -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/anaconda3/conda-bld/yosys_1607410735049/work=/usr/local/src/conda/yosys-0.8.0_0003_e80fb742f_20201208_122808 -fdebug-prefix-map=/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda=/usr/local/src/conda-prefix -fPIC -Os)


-- Parsing `/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: /home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v
Parsing Verilog input from `/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v' to AST representation.
Generating RTLIL representation for module `\dec1'.
Warning: wire '\a' is assigned in a block at /home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:41.2-41.29.
Warning: wire '\b' is assigned in a block at /home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:42.2-42.27.
Warning: wire '\c' is assigned in a block at /home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:43.2-43.16.
Warning: wire '\d' is assigned in a block at /home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:44.2-44.40.
Warning: wire '\e' is assigned in a block at /home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:45.2-45.76.
Warning: wire '\f' is assigned in a block at /home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:46.2-46.52.
Warning: wire '\g' is assigned in a block at /home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:47.2-47.41.
/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:16: Warning: Identifier `\clk' is implicitly declared.
Successfully finished Verilog frontend.

-- Running command `tcl /home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/quicklogic/synth.tcl' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

2. Executing Verilog-2005 frontend: /home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v
Parsing Verilog input from `/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\fpga_interconnect'.
Generating RTLIL representation for module `\CLOCK_CELL'.
Generating RTLIL representation for module `\BIDIR_CELL'.
Generating RTLIL representation for module `\SDIOMUX_CELL'.
Generating RTLIL representation for module `\T_FRAG'.
Generating RTLIL representation for module `\B_FRAG'.
Generating RTLIL representation for module `\Q_FRAG'.
Generating RTLIL representation for module `\F_FRAG'.
Generating RTLIL representation for module `\C_FRAG'.
Generating RTLIL representation for module `\ASSP'.
Generating RTLIL representation for module `\MULT'.
Generating RTLIL representation for module `\GMUX_IP'.
Generating RTLIL representation for module `\GMUX_IC'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v
Parsing Verilog input from `/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v' to AST representation.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB2_VPR'.
Successfully finished Verilog frontend.

4. Executing SYNTH_QUICKLOGIC pass.

4.1. Executing Verilog-2005 frontend: /home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/cells_sim.v
Parsing Verilog input from `/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

4.2. Executing Verilog-2005 frontend: /home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v
Parsing Verilog input from `/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\AND2I0'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux2x1'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\ahb_gen_bfm'.
Generating RTLIL representation for module `\oscillator_s1'.
Generating RTLIL representation for module `\sdma_bfm'.
Generating RTLIL representation for module `\ahb2fb_asynbrig_if'.
Generating RTLIL representation for module `\fb2ahb_asynbrig_if'.
Generating RTLIL representation for module `\ahb2fb_asynbrig'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro_bfm'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\fifo_controller_model'.
Generating RTLIL representation for module `\ram'.
Warning: Replacing memory \ram with list of registers. See /home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3671, /home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3585, /home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3560
Generating RTLIL representation for module `\x2_model'.
Generating RTLIL representation for module `\ram_block_8K'.
Generating RTLIL representation for module `\sw_mux'.
Generating RTLIL representation for module `\ram8k_2x1_cell'.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Generating RTLIL representation for module `\gpio_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\signed_mult'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Generating RTLIL representation for module `\RAM_8K_BLK'.
Generating RTLIL representation for module `\RAM_16K_BLK'.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
Successfully finished Verilog frontend.

4.3. Executing HIERARCHY pass (managing design hierarchy).

4.3.1. Finding top of design hierarchy..
root of   1 design levels: dec1                
Automatically selected dec1 as design top module.

4.3.2. Analyzing design hierarchy..
Top module:  \dec1

4.3.3. Analyzing design hierarchy..
Top module:  \dec1
Removed 0 unused modules.

4.4. Executing PROC pass (convert processes to netlists).

4.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$259 in module MULT.
Marked 2 switch rules as full_case in process $proc$/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$241 in module Q_FRAG.
Marked 1 switch rules as full_case in process $proc$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:20$1 in module dec1.
Removed a total of 0 dead cases.

4.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 17 assignments to connections.

4.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\Q_FRAG.$proc$/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$242'.
  Set init value: \QZ = 1'0

4.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \QST in `\Q_FRAG.$proc$/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$241'.
Found async reset \QRT in `\Q_FRAG.$proc$/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$241'.

4.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\MULT.$proc$/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$259'.
     1/2: $0\Cmult[63:0] [63:32]
     2/2: $0\Cmult[63:0] [31:0]
Creating decoders for process `\Q_FRAG.$proc$/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$242'.
Creating decoders for process `\Q_FRAG.$proc$/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$241'.
     1/1: $0\QZ[0:0]
Creating decoders for process `\dec1.$proc$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:20$1'.
     1/9: $1\Z[0:0]
     2/9: $1\Y[0:0]
     3/9: $1\X[0:0]
     4/9: $1\W[0:0]
     5/9: $1\A[0:0]
     6/9: $1\B[0:0]
     7/9: $1\C[0:0]
     8/9: $1\D[0:0]
     9/9: $1\delay[26:0]

4.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\MULT.\Cmult' using process `\MULT.$proc$/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$259'.
  created direct connection (no actual register cell created).
Creating register for signal `\Q_FRAG.\QZ' using process `\Q_FRAG.$proc$/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$241'.
Warning: Complex async reset for dff `\QZ'.
  created $dffsr cell `$procdff$1137' with positive edge clock and multiple level-sensitive resets.
Creating register for signal `\dec1.\A' using process `\dec1.$proc$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:20$1'.
  created $dff cell `$procdff$1138' with positive edge clock.
Creating register for signal `\dec1.\B' using process `\dec1.$proc$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:20$1'.
  created $dff cell `$procdff$1139' with positive edge clock.
Creating register for signal `\dec1.\C' using process `\dec1.$proc$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:20$1'.
  created $dff cell `$procdff$1140' with positive edge clock.
Creating register for signal `\dec1.\D' using process `\dec1.$proc$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:20$1'.
  created $dff cell `$procdff$1141' with positive edge clock.
Creating register for signal `\dec1.\X' using process `\dec1.$proc$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:20$1'.
  created $dff cell `$procdff$1142' with positive edge clock.
Creating register for signal `\dec1.\Y' using process `\dec1.$proc$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:20$1'.
  created $dff cell `$procdff$1143' with positive edge clock.
Creating register for signal `\dec1.\a' using process `\dec1.$proc$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:20$1'.
  created $dff cell `$procdff$1144' with positive edge clock.
Creating register for signal `\dec1.\b' using process `\dec1.$proc$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:20$1'.
  created $dff cell `$procdff$1145' with positive edge clock.
Creating register for signal `\dec1.\c' using process `\dec1.$proc$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:20$1'.
  created $dff cell `$procdff$1146' with positive edge clock.
Creating register for signal `\dec1.\d' using process `\dec1.$proc$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:20$1'.
  created $dff cell `$procdff$1147' with positive edge clock.
Creating register for signal `\dec1.\e' using process `\dec1.$proc$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:20$1'.
  created $dff cell `$procdff$1148' with positive edge clock.
Creating register for signal `\dec1.\f' using process `\dec1.$proc$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:20$1'.
  created $dff cell `$procdff$1149' with positive edge clock.
Creating register for signal `\dec1.\g' using process `\dec1.$proc$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:20$1'.
  created $dff cell `$procdff$1150' with positive edge clock.
Creating register for signal `\dec1.\W' using process `\dec1.$proc$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:20$1'.
  created $dff cell `$procdff$1151' with positive edge clock.
Creating register for signal `\dec1.\Z' using process `\dec1.$proc$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:20$1'.
  created $dff cell `$procdff$1152' with positive edge clock.
Creating register for signal `\dec1.\delay' using process `\dec1.$proc$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:20$1'.
  created $dff cell `$procdff$1153' with positive edge clock.

4.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\MULT.$proc$/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$259'.
Removing empty process `MULT.$proc$/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$259'.
Removing empty process `Q_FRAG.$proc$/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$242'.
Found and cleaned up 1 empty switch in `\Q_FRAG.$proc$/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$241'.
Removing empty process `Q_FRAG.$proc$/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$241'.
Found and cleaned up 1 empty switch in `\dec1.$proc$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:20$1'.
Removing empty process `dec1.$proc$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:20$1'.
Cleaned up 6 empty switches.

4.5. Executing FLATTEN pass (flatten design).

4.6. Executing TRIBUF pass.

4.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module dec1.

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dec1..
Removed 0 unused cells and 34 unused wires.

4.9. Executing DEMINOUT pass (demote inout ports to input or output).

4.10. Executing OPT pass (performing simple optimizations).

4.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dec1.

4.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dec1'.
Removed a total of 146 cells.

4.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dec1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dec1.
Performed a total of 0 changes.

4.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dec1'.
Removed a total of 0 cells.

4.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dec1..
Removed 0 unused cells and 146 unused wires.

4.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dec1.

4.10.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dec1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dec1.
Performed a total of 0 changes.

4.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dec1'.
Removed a total of 0 cells.

4.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dec1..

4.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dec1.

4.10.16. Finished OPT passes. (There is nothing left to do.)

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module dec1.

4.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dec1..

4.13. Executing CHECK pass (checking for obvious problems).
checking module dec1..
found and reported 0 problems.

4.14. Executing OPT pass (performing simple optimizations).

4.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dec1.

4.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dec1'.
Removed a total of 0 cells.

4.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dec1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dec1.
Performed a total of 0 changes.

4.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dec1'.
Removed a total of 0 cells.

4.14.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dec1..

4.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dec1.

4.14.9. Finished OPT passes. (There is nothing left to do.)

4.15. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell dec1.$add$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:23$2 ($add).
Removed top 5 bits (of 32) from port Y of cell dec1.$add$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:23$2 ($add).
Removed top 9 bits (of 32) from port B of cell dec1.$gt$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:25$3 ($gt).
Removed top 5 bits (of 32) from wire dec1.$add$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:23$2_Y.

4.16. Executing PEEPOPT pass (run peephole optimizers).

4.17. Executing PMUXTREE pass.

4.18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dec1..
Removed 0 unused cells and 1 unused wires.

4.19. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module dec1:
  creating $macc model for $add$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:23$2 ($add).
  creating $alu model for $macc $add$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:23$2.
  creating $alu model for $gt$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:25$3 ($gt): new $alu
  creating $alu cell for $gt$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:25$3: $auto$alumacc.cc:485:replace_alu$1156
  creating $alu cell for $add$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:23$2: $auto$alumacc.cc:485:replace_alu$1161
  created 2 $alu and 0 $macc cells.

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dec1.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dec1'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dec1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dec1.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dec1'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dec1..
Removed 1 unused cells and 2 unused wires.

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dec1.

4.20.9. Rerunning OPT passes. (Maybe there is more to do..)

4.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dec1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dec1.
Performed a total of 0 changes.

4.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dec1'.
Removed a total of 0 cells.

4.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dec1..

4.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dec1.

4.20.16. Finished OPT passes. (There is nothing left to do.)

4.21. Executing FSM pass (extract and optimize FSM).

4.21.1. Executing FSM_DETECT pass (finding FSMs in design).

4.21.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.21.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dec1..

4.21.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.21.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.21.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dec1.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dec1'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dec1..

4.22.5. Finished fast OPT passes.

4.23. Executing MEMORY pass.

4.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.23.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.23.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dec1..

4.23.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.23.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dec1..

4.23.6. Executing MEMORY_COLLECT pass (generating $mem cells).

4.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dec1..

4.25. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

4.26. Executing PP3_BRAMINIT pass.
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:29$10
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:29$12
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:29$13
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:29$4
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:29$5
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:29$7
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:30$17
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:30$18
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:30$19
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:30$21
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:30$23
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:30$25
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:30$31
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:30$35
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:30$37
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:31$43
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:31$44
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:31$50
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:32$70
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:32$72
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:32$74
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:32$76
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:32$81
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:32$83
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:32$87
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:32$89
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:41$109
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:42$115
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:42$120
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:45$168
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:45$172
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:45$173
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:45$174
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:45$177
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:45$179
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:45$180
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:46$184
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:46$186
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:46$187
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:46$191
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:46$193
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:46$199
cell type $and$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:47$212
cell type $auto$alumacc.cc:485:replace_alu$1156
cell type $auto$alumacc.cc:485:replace_alu$1161
cell type $logic_not$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:29$11
cell type $logic_not$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:29$6
cell type $logic_not$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:29$8
cell type $logic_not$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:29$9
cell type $logic_not$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:41$101
cell type $logic_not$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:41$104
cell type $logic_not$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:41$108
cell type $logic_not$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:41$99
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:29$14
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:30$26
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:30$32
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:30$38
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:31$51
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:31$57
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:31$63
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:32$77
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:32$84
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:32$90
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:32$97
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:41$110
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:42$121
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:44$145
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:45$157
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:45$164
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:45$170
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:45$175
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:45$181
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:46$194
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:46$200
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:46$205
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:47$219
cell type $or$/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/incdec.v:47$224
cell type $procdff$1138
cell type $procdff$1139
cell type $procdff$1140
cell type $procdff$1141
cell type $procdff$1142
cell type $procdff$1143
cell type $procdff$1144
cell type $procdff$1145
cell type $procdff$1146
cell type $procdff$1147
cell type $procdff$1148
cell type $procdff$1149
cell type $procdff$1150
cell type $procdff$1151
cell type $procdff$1152
cell type $procdff$1153
cell type $procmux$1099
cell type $procmux$1102
cell type $procmux$1105
cell type $procmux$1108
cell type $procmux$1111
cell type $procmux$1114
cell type $procmux$1117
cell type $procmux$1120
cell type $procmux$1123
cell type u_qlal4s3b_cell_macro

4.27. Executing TECHMAP pass (map to technology primitives).

4.27.1. Executing Verilog-2005 frontend: /home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v
Parsing Verilog input from `/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB16K'.
/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:21: Warning: Identifier `\VCC' is implicitly declared.
/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:22: Warning: Identifier `\GND' is implicitly declared.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB8K'.
/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:239: Warning: Identifier `\GND' is implicitly declared.
/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:240: Warning: Identifier `\VCC' is implicitly declared.
Generating RTLIL representation for module `\RAM_8K_BLK'.
/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:539: Warning: Range [17:0] select out of bounds on signal `\out_reg0': Setting 2 MSB bits to undef.
Generating RTLIL representation for module `\RAM_16K_BLK'.
/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:825: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:999: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 20 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:1251: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Successfully finished Verilog frontend.

4.27.2. Continuing TECHMAP pass.
No more expansions possible.

4.28. Executing OPT pass (performing simple optimizations).

4.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dec1.

4.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dec1'.
Removed a total of 0 cells.

4.28.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dec1..

4.28.5. Finished fast OPT passes.

4.29. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.30. Executing OPT pass (performing simple optimizations).

4.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dec1.

4.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dec1'.
Removed a total of 0 cells.

4.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dec1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dec1.
Performed a total of 0 changes.

4.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dec1'.
Removed a total of 0 cells.

4.30.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dec1..

4.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dec1.

4.30.9. Finished OPT passes. (There is nothing left to do.)

4.31. Executing TECHMAP pass (map to technology primitives).

4.31.1. Executing Verilog-2005 frontend: /home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.31.2. Continuing TECHMAP pass.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=27\Y_WIDTH=27 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=23\B_WIDTH=27\Y_WIDTH=27 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=27 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.

4.32. Executing OPT pass (performing simple optimizations).

4.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dec1.

4.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dec1'.
Removed a total of 2 cells.

4.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dec1..
Removed 82 unused cells and 174 unused wires.

4.32.5. Finished fast OPT passes.

4.33. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module dec1..
  Treeifying 35 MUXes:
    Found tree with 1 MUXes at root $0\A[0:0].
    Found tree with 1 MUXes at root $0\B[0:0].
    Found tree with 1 MUXes at root $0\C[0:0].
    Found tree with 1 MUXes at root $0\D[0:0].
    Found tree with 1 MUXes at root $0\X[0:0].
    Found tree with 1 MUXes at root $0\Y[0:0].
    Found tree with 1 MUXes at root $0\W[0:0].
    Found tree with 1 MUXes at root $0\Z[0:0].
    Found tree with 1 MUXes at root $0\delay[26:0] [0].
    Found tree with 1 MUXes at root $0\delay[26:0] [1].
    Found tree with 1 MUXes at root $0\delay[26:0] [2].
    Found tree with 1 MUXes at root $0\delay[26:0] [3].
    Found tree with 1 MUXes at root $0\delay[26:0] [4].
    Found tree with 1 MUXes at root $0\delay[26:0] [5].
    Found tree with 1 MUXes at root $0\delay[26:0] [6].
    Found tree with 1 MUXes at root $0\delay[26:0] [7].
    Found tree with 1 MUXes at root $0\delay[26:0] [8].
    Found tree with 1 MUXes at root $0\delay[26:0] [9].
    Found tree with 1 MUXes at root $0\delay[26:0] [10].
    Found tree with 1 MUXes at root $0\delay[26:0] [11].
    Found tree with 1 MUXes at root $0\delay[26:0] [12].
    Found tree with 1 MUXes at root $0\delay[26:0] [13].
    Found tree with 1 MUXes at root $0\delay[26:0] [14].
    Found tree with 1 MUXes at root $0\delay[26:0] [15].
    Found tree with 1 MUXes at root $0\delay[26:0] [16].
    Found tree with 1 MUXes at root $0\delay[26:0] [17].
    Found tree with 1 MUXes at root $0\delay[26:0] [18].
    Found tree with 1 MUXes at root $0\delay[26:0] [19].
    Found tree with 1 MUXes at root $0\delay[26:0] [20].
    Found tree with 1 MUXes at root $0\delay[26:0] [21].
    Found tree with 1 MUXes at root $0\delay[26:0] [22].
    Found tree with 1 MUXes at root $0\delay[26:0] [23].
    Found tree with 1 MUXes at root $0\delay[26:0] [24].
    Found tree with 1 MUXes at root $0\delay[26:0] [25].
    Found tree with 1 MUXes at root $0\delay[26:0] [26].
    Finished treeification: Found 35 trees.
  Covering trees:
    Replaced tree at $0\A[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\B[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\C[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\D[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\X[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\Y[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\W[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\Z[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 0 decoder MUXes.

4.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module dec1.

4.35. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Transforming FF to FF+Enable cells in module dec1:
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2164 for $0\X[0:0] -> \X.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1374.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2171 for $0\Y[0:0] -> \Y.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1375.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2178 for $0\W[0:0] -> \W.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1383.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2185 for $0\Z[0:0] -> \Z.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1384.

4.36. Executing TECHMAP pass (map to technology primitives).

4.36.1. Executing Verilog-2005 frontend: /home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.36.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.

4.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module dec1.

4.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4.39. Executing TECHMAP pass (map to technology primitives).

4.39.1. Executing Verilog-2005 frontend: /home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_latches_map.v
Parsing Verilog input from `/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Successfully finished Verilog frontend.

4.39.2. Continuing TECHMAP pass.
No more expansions possible.

4.40. Executing ABC pass (technology mapping using ABC).

4.40.1. Extracting gate netlist of module `\dec1' to `<abc-temp-dir>/input.blif'..
Extracted 253 gates and 289 wires to a netlist network with 35 inputs and 46 outputs.

4.40.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + read_lut <yosys-exe-dir>/../share/yosys/quicklogic/pp3_lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + sweep 
ABC: + eliminate 
ABC: + if 
ABC: The network was strashed and balanced before FPGA mapping.
ABC: + mfs 
ABC: + lutpack 
ABC: + dress 
ABC: Total number of equiv classes                =      55.
ABC: Participating nodes from both networks       =     139.
ABC: Participating nodes from the first network   =      61. (  70.93 % of nodes)
ABC: Participating nodes from the second network  =      78. (  90.70 % of nodes)
ABC: Node pairs (any polarity)                    =      61. (  70.93 % of names can be moved)
ABC: Node pairs (same polarity)                   =      61. (  70.93 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

4.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       81
ABC RESULTS:        internal signals:      208
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:       46
Removing temp directory.

4.41. Executing TECHMAP pass (map to technology primitives).

4.41.1. Executing Verilog-2005 frontend: /home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.41.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 0 unused cells and 352 unused wires.

4.42. Executing TECHMAP pass (map to technology primitives).

4.42.1. Executing Verilog-2005 frontend: /home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v
Parsing Verilog input from `/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX8_'.
Generating RTLIL representation for module `\$_MUX4_'.
Generating RTLIL representation for module `\$_MUX_'.
Generating RTLIL representation for module `\$_NOT_'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v:44: Warning: Identifier `\Valid_mult_w' is implicitly declared.
Successfully finished Verilog frontend.

4.42.2. Executing Verilog-2005 frontend: /home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_lut_map.v
Parsing Verilog input from `/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.42.3. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101011100010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010000000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
No more expansions possible.
Removed 0 unused cells and 156 unused wires.

4.43. Executing Quicklogic_EQN pass (calculate equations for luts).

4.44. Updated 78 of LUT* elements with equation.

4.45. Executing AUTONAME pass.
Renamed 506 objects in module dec1 (16 iterations).

4.46. Executing HIERARCHY pass (managing design hierarchy).

4.46.1. Analyzing design hierarchy..
Top module:  \dec1

4.46.2. Analyzing design hierarchy..
Top module:  \dec1
Removed 0 unused modules.

4.47. Printing statistics.

=== dec1 ===

   Number of wires:                 73
   Number of wire bits:            125
   Number of public wires:          73
   Number of public wire bits:     125
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                121
     LUT2                           24
     LUT3                           37
     LUT4                           17
     dff                            38
     dffe                            4
     qlal4s3b_cell_macro             1

4.48. Executing CHECK pass (checking for obvious problems).
checking module dec1..
found and reported 0 problems.

4.49. Executing CLKBUFMAP pass (inserting global clock buffers).
Inserting $_BUF_ on dec1.clk[0].

4.50. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port dec1.a using outpad.
Mapping port dec1.b using outpad.
Mapping port dec1.c using outpad.
Mapping port dec1.d using outpad.
Mapping port dec1.e using outpad.
Mapping port dec1.f using outpad.
Mapping port dec1.g using outpad.

4.51. Executing SPLITNETS pass (splitting up multi-bit signals).

4.52. Executing SETUNDEF pass (replace undef values with defined constants).

4.53. Executing HILOMAP pass (mapping to constant drivers).

4.54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dec1..
Removed 0 unused cells and 5 unused wires.

4.55. Executing CHECK pass (checking for obvious problems).
checking module dec1..
found and reported 0 problems.

5. Printing statistics.

=== dec1 ===

   Number of wires:                129
   Number of wire bits:            129
   Number of public wires:         122
   Number of public wire bits:     122
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                129
     LUT2                           24
     LUT3                           37
     LUT4                           17
     dff                            38
     dffe                            4
     logic_0                         1
     outpad                          7
     qlal4s3b_cell_macro             1

Loading PCF from '/home/rahul/qorc-sdk/qorc-testapps/qf_helloworldfpga/decoders/pygmy.pcf'...
Loading pinmap CSV from '/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/arch/ql-eos-s3_wlcsp/pinmap_PU64.csv'...
Processing cells...
  type       | net        | pad        | loc      | type     | instance
 ------------+------------+------------+----------+----------+-----------
  outpad     | a          | 3          | X12Y3    | BIDIR    | $iopadmap$dec1.a
  outpad     | b          | 64         | X14Y3    | BIDIR    | $iopadmap$dec1.b
  outpad     | c          | 62         | X16Y3    | BIDIR    | $iopadmap$dec1.c
  outpad     | d          | 63         | X18Y3    | BIDIR    | $iopadmap$dec1.d
  outpad     | e          | 61         | X20Y3    | BIDIR    | $iopadmap$dec1.e
  outpad     | f          | 59         | X24Y3    | BIDIR    | $iopadmap$dec1.f
  outpad     | g          | 57         | X26Y3    | BIDIR    | $iopadmap$dec1.g

6. Executing Verilog backend.
Dumping module `\dec1'.

7. Executing TECHMAP pass (map to technology primitives).

7.1. Executing Verilog-2005 frontend: /home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

7.2. Continuing TECHMAP pass.
Using template logic_0 for cells of type logic_0.
No more expansions possible.

8. Executing TECHMAP pass (map to technology primitives).

8.1. Executing Verilog-2005 frontend: /home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

8.2. Continuing TECHMAP pass.
Using template qlal4s3b_cell_macro for cells of type qlal4s3b_cell_macro.
Using template dff for cells of type dff.
Using template $paramod$ef89328d7363dd7125c1eba8428f7d9cbe4f3212\LUT2 for cells of type LUT2.
Using template $paramod$86fc6f3441a6779c63af6935d48b3ebd1c0460a9\LUT3 for cells of type LUT3.
Using template $paramod$08b61d33fc5053edb3ff48cc7932a6bed21127f8\LUT3 for cells of type LUT3.
Using template $paramod$4a30532bc133c2eb9cd5f67b9a7151b65f5b78fc\LUT3 for cells of type LUT3.
Using template $paramod$ebab70a5830b6a9f5483ac0ce1c2f41b14b4eddd\LUT3 for cells of type LUT3.
Using template $paramod$0bac8de66bcfb448c202f31a4c603d45054ce4da\LUT4 for cells of type LUT4.
Using template $paramod$bf21fee4b6975de7353dd955d4b3a8eef751c7c5\LUT2 for cells of type LUT2.
Using template $paramod$e26d5f83608228413558872bf585b830a9f56b6a\LUT2 for cells of type LUT2.
Using template $paramod$3c9a80e22449b55125937c206048132eec9a2350\LUT4 for cells of type LUT4.
Using template $paramod\LUT3\INIT=9'000000001\EQN=8'00110000 for cells of type LUT3.
Using template $paramod$85c710d2c6083b8966f470930cae8dbf38a074b9\LUT4 for cells of type LUT4.
Using template $paramod$d91484b999e8902d2634ed6ec2738d69a47a120a\LUT4 for cells of type LUT4.
Using template $paramod$1e034c6707d1241f1fba38d5c129a8e184845510\LUT4 for cells of type LUT4.
Using template $paramod$a3585111a807d9eb68f35b3cdf72c072f00fd2ee\LUT2 for cells of type LUT2.
Using template $paramod$eaa5b8ce31b5b445eaa93b247abc2c39669e1302\LUT3 for cells of type LUT3.
Using template $paramod$ddee44217c2cf0aa6106dc4f0243791d6e1c2ec0\LUT4 for cells of type LUT4.
Using template dffe for cells of type dffe.
Using template $paramod$885d448b152f0d0eb07370269f766062b2b71bdb\LUT4 for cells of type LUT4.
Using template $paramod$583aaf1bad24c2094923e15160bd4273c491792b\LUT4 for cells of type LUT4.
Using template $paramod$a05482f0aefd17419d352e885b744935e93eea82\LUT3 for cells of type LUT3.
Using template $paramod$51a9a4255281ba9cd71910c426311d68fc1c44e6\LUT4 for cells of type LUT4.
Using template $paramod$768cbfc50bec0c36fd8ce88c96aa5297101a129e\LUT4 for cells of type LUT4.
Using template $paramod$0d9aa11c31cb8651d29ceaceef9b01936bc0cb64\LUT4 for cells of type LUT4.
Using template $paramod$5439f95b730483be4c800922bcebe9a105e90f4d\LUT4 for cells of type LUT4.
Using template $paramod$2b1995275750ba1e9d060f9685a50af2da59292c\LUT4 for cells of type LUT4.
Using template $paramod$fa3380cd31d3eaf3369d75f1d1b91f2cba5e8470\outpad for cells of type outpad.
Using template $paramod$4da62a2f3593426548f45892aaeb7356ad46a6a4\outpad for cells of type outpad.
Using template $paramod$666d57638572eef64b702648a4829c6da6ea5f7a\outpad for cells of type outpad.
Using template $paramod$117fce6350e56289fd8dedf8156a2dedef7a8eae\LUT4 for cells of type LUT4.
Using template $paramod$02aa829d7bb4d3bbae67ad5ee2e5a326704559e9\outpad for cells of type outpad.
Using template $paramod$a389f524cda2d55da4212e3544c72c8c9bd7cfb1\LUT4 for cells of type LUT4.
Using template $paramod$3494bf91dff70d828c5f5312272dede938de1112\outpad for cells of type outpad.
Using template $paramod$03fa78d84bd5e07f6e124fa217a4ce84543d615a\outpad for cells of type outpad.
Using template $paramod$d8b4ab69a8b5413c066ad38d899c9d4a3dedc93a\outpad for cells of type outpad.
No more expansions possible.

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v
Parsing Verilog input from `/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v' to AST representation.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
No more expansions possible.

10. Executing OPT_EXPR pass (perform const folding).
Optimizing module dec1.

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dec1..
Removed 0 unused cells and 188 unused wires.

12. Executing SETUNDEF pass (replace undef values with defined constants).

13. Printing statistics.

=== dec1 ===

   Number of wires:               1044
   Number of wire bits:           1161
   Number of public wires:        1014
   Number of public wire bits:    1014
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                128
     ASSP                            1
     BIDIR_CELL                      7
     C_FRAG                         17
     Q_FRAG                         42
     T_FRAG                         61

14. Executing JSON backend.

15. Executing Verilog backend.
Dumping module `\dec1'.

Warnings: 16 unique messages, 19 total
End of script. Logfile hash: 62e4d3fc1d, CPU: user 5.85s system 0.18s, MEM: 265.74 MB peak
Yosys 0.9+2406 (git sha1 9ac3484, x86_64-conda_cos6-linux-gnu-gcc 1.24.0.133_b0863d8_dirty -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/anaconda3/conda-bld/yosys_1607410735049/work=/usr/local/src/conda/yosys-0.8.0_0003_e80fb742f_20201208_122808 -fdebug-prefix-map=/home/rahul/qorc-sdk/fpga_toolchain_install/v1.3.1/conda=/usr/local/src/conda-prefix -fPIC -Os)
Time spent: 64% 18x read_verilog (3 sec), 8% 4x write_verilog (0 sec), ...
